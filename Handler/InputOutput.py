class Input_Output:
    def input(self):
        return input()

    def output_start(self):
        print('–ü—Ä–∏–≤–µ—Ç! –ø–∏—à–∏ start, –∫–∞–∫ —Ä–µ—à–∏—à—å –ø–æ–∏–≥—Ä–∞—Ç—å')

    def questions_quick_start(self):
        print('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –Ω–æ–≤—ã–µ? –¥–∞/–Ω–µ—Ç')
        print('''–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
        —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 10—Ö10
        –ø—Ä—è–º—ã–µ –∫–æ—Ä–∞–±–ª–∏
        –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        –ª–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
        –∏–≥—Ä–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏''')

    def questions_size_field(self):
        print('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è, –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ 10, 15 –∏–ª–∏ 20')

    def questions_ships(self):
        print('–ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä—å –∫–æ—Ä–∞–±–ª–∏! –¢—ã —Ö–æ—á–µ—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä—è–º—ã–µ(straight) –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ —É–≥–ª–æ–≤—ã–µ(angular) –∫–æ—Ä–∞–±–ª–∏?')

    def questions_count_players(self):
        print('–¢—ã —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π(bot) –∏–ª–∏ —Å –¥—Ä—É–≥–æ–º(friend)?')

    def questions_difficultly(self):
        print('–í–æ—É, –∫–ª–∞—Å—Å! –•–º, –Ω–æ —è –º–æ–≥—É –∏–≥—Ä–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Ñ–∏ –ª–∏ –∫–∞–∫ –Ω–æ–≤–∏—á–µ–∫, –¥–∞–≤–∞–π —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —É—Ä–æ–≤–µ–Ω—å: –ø—Ä–æ—Å—Ç–æ–π(easy) –∏–ª–∏ '
              '—Å–ª–æ–∂–Ω—ã–π—Ç(hard)')

    def questions_filling(self):
        print('–û—Ö, –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ. –ö—Ç–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç –∫–æ—Ä–∞–±–ª–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏(machine) –∏–ª–∏ —Å–∞–º(hands)')

    def questions_time(self):
        print('–ò–∏–∏, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∏–≥—Ä–∞–µ–º –Ω–∞ –≤—Ä–µ–º—è ( —É —Ç–µ–±—è –±—É–¥–µ—Ç 5 –º–∏–Ω—É—Ç ) ? –¥–∞/–Ω–µ—Ç')

    def input_coordinates(self):
        print('–≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Ü–∏—Ñ—Ä–∞, –±—É–∫–≤–∞): ')
        return self.input()

    def output_str(self, str):
        print(str)

    def output_exe(self):
        print('–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

    def output_win(self, player):
        print('–ø–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫' + str(player))

    def output_seating(self, player):
        print(f'—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ {player}')

    def output_finish_seating(self):
        print('—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ \n–Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!')

    def output_fields(self, field_pattern, field_attack, n):
        #field = '                                player' + str(is_player) + '\n'
        field = '           player 1                             player 2\n'
        field_pattern = self.to_string_field(field_pattern, n).split('\n')
        field_attack = self.to_string_field(field_attack, n).split('\n')

        for i in range(len(field_pattern) - 1):
            field += ' ' + field_pattern[i] + '   ' + field_attack[i] + '\n'


        print(field)

    def output_field(self, field, n):
        print(self.to_string_field(field, n))

    def to_string_field(self, field, n):
        n+=1
        map_transform_desk = {'0': '‚óºÔ∏è', '1': 'üö¢', '2': 'üóØ', '3': 'üö¢', '?': '‚ùî', '!': '‚ùóÔ∏è', '+': '+'}
        result_str = ' '
        for i in range(n):
            temp_str = ''
            if i <10:
                temp_str+=' '
            for j in range(n):
                if j != 0 and i != 0:
                    temp_str += str(map_transform_desk.get(field[i][j])) + ' '
                elif i == n:
                    temp_str += str(field[i][j]) + ' '
                else:
                    temp_str += str(field[i][j]) + '  '
            result_str += temp_str + "\n"
        return result_str
