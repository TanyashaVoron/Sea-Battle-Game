class Output:
    """
    –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ gui
    """

    def __init__(self):
        '''
        –ø–æ–¥–≥–æ–Ω–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
        –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–µ–ª—å–∑—è –∏–∑-–∑–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≤ —à—Ä–∏—Ñ—Ç–∞—Ö –∏ —à–∏—Ä–∏–Ω–µ –±—É–∫–≤
        —Ä–∞–∑–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ - —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        '''
        self.ABC = {
            10: '      A  B  C  D  E  F  G  H   I   J  \n',
            15: '      A  B  C  D   E  F  G  H   I   J   K  L  M  N  O  \n',
            20: '      A   B   C    D    E   F   G   H    I    J    K   L    M   N   O   P   Q   R    S   T   \n'}
        self.SPACE = {
            10: ' ' * 40,
            15: ' ' * 67,
            20: ' ' * 113
        }

    def win(self, player):
        return f'–ø–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {str(player)}'

    def draw(self):
        return '–Ω–∏—á—å—è!'

    def error(self):
        return '–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞'

    def instructions(self):
        return '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Ü–∏—Ñ—Ä–∞, –±—É–∫–≤–∞)\n–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –í–í–û–î'

    def fields(self, field_pattern, field_attack, field_size, turn):
        """
        –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–≤—É—Ö –ø–æ–ª–µ–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        """
        field = f'—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä {turn}\n'
        field += f'             –∏–≥—Ä–æ–∫ 1{self.SPACE[field_size]}–∏–≥—Ä–æ–∫ 2\n'
        field_pattern = self.to_string_field(field_pattern, field_size).split('\n')
        field_attack = self.to_string_field(field_attack, field_size).split('\n')

        for i in range(len(field_pattern) - 1):
            field += ' ' + field_pattern[i] + '   ' + field_attack[i] + '\n'

        return field

    def field(self, field, n, num):
        return f'p–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ {num} –∏–≥—Ä–æ–∫–∞\n{self.to_string_field(field, n)}'

    def to_string_field(self, field, field_size):
        """
        –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å —Å–º–∞–π–ª–∞–º–∏
        """
        field_size += 1
        map_transform_desk = {'0': '‚óºÔ∏è', '1': 'üö¢', '2': 'üóØ', '3': 'üö¢', '?': '‚ùî', '!': '‚ùóÔ∏è', '+': '+'}
        result_str = f' {self.ABC[field_size - 1]}'
        for i in range(1, field_size):
            temp_str = ''
            if i == 0:
                temp_str += ' '
            if i < 10:
                temp_str += '  '
            for j in range(field_size):
                if i == 0 and j == 0:
                    temp_str += ' '
                if i == 0 and (j == 9 or j == 10):
                    temp_str += ' '
                if j != 0 and i != 0:
                    temp_str += str(map_transform_desk.get(field[i][j])) + ' '
                elif i == field_size:
                    temp_str += str(field[i][j]) + ' '
                else:
                    temp_str += str(field[i][j]) + '  '
            result_str += temp_str + "\n"
        return result_str
